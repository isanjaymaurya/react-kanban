{"version":3,"sources":["dataset.js","Task.js","Column.js","App.js","reportWebVitals.js","index.js"],"names":["dataset","tasks","id","content","columns","title","taskIds","columnOrder","Container","styled","div","props","isDragging","Task","draggableId","task","index","provided","snapshot","draggableProps","dragHandleProps","ref","innerRef","Title","h3","TaskList","isDraggingOver","Column","column","droppableId","type","droppableProps","map","placeholder","App","useState","data","setData","onDragEnd","result","destination","source","start","finish","startTaskIds","Array","from","splice","newStart","finishTaskIds","newFinish","newState","newTaskIds","newColumn","newColumnOrder","direction","taskId","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.75073394.chunk.js","sourcesContent":["const dataset = {\n    tasks: {\n        \"task-1\": { id: \"task-1\", content: \"Content for task 1\" },\n        \"task-2\": { id: \"task-2\", content: \"Content for task-2\" },\n        \"task-3\": { id: \"task-3\", content: \"Content for task-3\" },\n        \"task-4\": { id: \"task-4\", content: \"Content for task-4\" }\n    },\n    columns: {\n        \"column-1\": { id: \"column-1\", title: \"Todo\", taskIds: ['task-1'] },\n        \"column-2\": { id: \"column-2\", title: \"In progress\", taskIds: ['task-2', 'task-3'] },\n        \"column-3\": { id: \"column-3\", title: \"Review\", taskIds: [] },\n        \"column-4\": { id: \"column-4\", title: \"Completed\", taskIds: [\"task-4\"] }\n    },\n    columnOrder: [\"column-1\", \"column-2\", \"column-3\", \"column-4\"]\n}\n\nexport default dataset","import React from 'react'\nimport styled from 'styled-components'\nimport { Draggable } from 'react-beautiful-dnd'\nconst Container = styled.div`\n    border: 1px solid lightgrey;\n    padding:8px;\n    margin-bottom:8px;\n    border-radius:2px;\n    background-color:${props => (props.isDragging ? '#e0ffe0' : 'white')};\n`\nfunction Task(props) {\n    return (\n        <Draggable draggableId={props.task.id} index={props.index}>\n            {(provided, snapshot) => (\n                <Container\n                    {...provided.draggableProps}\n                    {...provided.dragHandleProps}\n                    ref={provided.innerRef}\n                    isDragging={snapshot.isDragging}\n                >\n                    {props.task.content}\n                </Container>\n            )}\n        </Draggable>\n    )\n}\n\nexport default Task\n","import React from 'react'\nimport styled from 'styled-components'\nimport Task from './Task'\nimport { Droppable, Draggable } from 'react-beautiful-dnd'\nconst Container = styled.div`\n    margin: 1rem;\n    border: 1px solid lightgrey;\n    border-radius: 5px;\n    width:250px;\n    display:flex;\n    flex-direction: column;\n    background-color:white;\n`;\nconst Title = styled.h3`\n    padding: 0 1rem;\n    margin: 1rem 0; \n`;\nconst TaskList = styled.div`\n    padding: 1rem;\n    background-color: ${props => (props.isDraggingOver ? '#d5f3ff' : 'inherit')};\n    min-height:100px;\n`;\n\nfunction Column(props) {\n    return (\n        <Draggable draggableId={props.column.id} index={props.index}>\n            {(provided) => (\n                <Container\n                    ref={provided.innerRef}\n                    {...provided.draggableProps}>\n                    <Title {...provided.dragHandleProps}>{props.column.title}</Title>\n                    <Droppable droppableId={props.column.id} type='task'>\n                        {(provided, snapshot) => (\n                            <TaskList\n                                ref={provided.innerRef}\n                                {...provided.droppableProps}\n                                isDraggingOver={snapshot.isDraggingOver}\n                            >\n                                {props.tasks.map((task, index) => <Task key={task.id} task={task} index={index} />)}\n                                {provided.placeholder}\n                            </TaskList>\n                        )}\n                    </Droppable>\n                </Container>\n\n            )}\n        </Draggable>\n    )\n}\n\nexport default Column\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport dataset from './dataset'\nimport Column from './Column'\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd'\n\nconst Container = styled.div`\n    display : flex;\n`\n\nconst App = () => {\n  const [data, setData] = useState(dataset)\n\n  const onDragEnd = result => {\n    const { destination, source, draggableId, type } = result;\n    //If there is no destination\n    if (!destination) { return }\n\n    //If source and destination is the same\n    if (destination.droppableId === source.droppableId && destination.index === source.index) { return }\n\n    //If you're dragging columns\n    if (type === 'column') {\n      const newColumnOrder = Array.from(data.columnOrder);\n      newColumnOrder.splice(source.index, 1);\n      newColumnOrder.splice(destination.index, 0, draggableId);\n      const newState = {\n        ...data,\n        columnOrder: newColumnOrder\n      }\n      setData(newState)\n      return;\n    }\n\n    //Anything below this happens if you're dragging tasks\n    const start = data.columns[source.droppableId];\n    const finish = data.columns[destination.droppableId];\n\n    //If dropped inside the same column\n    if (start === finish) {\n      const newTaskIds = Array.from(start.taskIds);\n      newTaskIds.splice(source.index, 1);\n      newTaskIds.splice(destination.index, 0, draggableId);\n      const newColumn = {\n        ...start,\n        taskIds: newTaskIds\n      }\n      const newState = {\n        ...data,\n        columns: {\n          ...data.columns,\n          [newColumn.id]: newColumn\n        }\n      }\n      setData(newState)\n      return;\n    }\n\n    //If dropped in a different column\n    const startTaskIds = Array.from(start.taskIds);\n    startTaskIds.splice(source.index, 1);\n    const newStart = {\n      ...start,\n      taskIds: startTaskIds\n    }\n\n    const finishTaskIds = Array.from(finish.taskIds);\n    finishTaskIds.splice(destination.index, 0, draggableId);\n    const newFinish = {\n      ...finish,\n      taskIds: finishTaskIds\n    }\n\n    const newState = {\n      ...data,\n      columns: {\n        ...data.columns,\n        [newStart.id]: newStart,\n        [newFinish.id]: newFinish\n      }\n    }\n\n    setData(newState)\n  }\n\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>\n      <Droppable droppableId='all-columns' direction='horizontal' type='column'>\n        {(provided) => (\n          <Container {...provided.droppableProps} ref={provided.innerRef}>\n            {data.columnOrder.map((id, index) => {\n              const column = data.columns[id]\n              const tasks = column.taskIds.map(taskId => data.tasks[taskId])\n\n              return <Column key={column.id} column={column} tasks={tasks} index={index} />\n            })}\n            {provided.placeholder}\n          </Container>\n        )}\n      </Droppable>\n    </DragDropContext>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}